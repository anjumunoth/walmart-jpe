Java performance engineering : 
why tools ?
	-- observe the jvm
	-- cpu utilisation, memory, threads
	-- throttling, memory leak, threads deadlock, latency, throughput, lock -- contention
	-- over/ under provision of cpu/ memory
	-- best use of the resources and optimise computational time
	-- optimise performance, memory, cost 
	-- USER experience 
	-- reduced cloud/server costs
	-- code can be culprit -- developer -- code, monitoring, recoding -- You Build. You Own.
	-- open source tools, properitary tools
	-- multiple tools 
	-- Grafana and Prometheus
		-- dashboards and data source
		-- monitoring cpu and memory, latency, api level metrices
		-- jvm utilisation
	-- Limitations 
		-- threads 
		-- live memory analysis
		-- code analysis
		
-- flamegraphs
-- hotspots

gc 
	-- automatic process of deallocation of memory(unused/ dead objects)
	-- generation movement
	-- compaction
	-- 

Employee emp=new Employee();

JVM 

class Employee{
static int ctr=0;
	static void incrementCtr()
	{
		ctr++;
	}
}

static 
	-- shared by all the objects
	-- only one instance available
	-- after class loading and linking -- static var are initialised
	-- use cases
		-- consumes less memory
			-- only one instance available for n objects of the same class
			-- static field stored in method area
				-- faster access
			-- objects are stored in heap memory
			-- static var -- longer period of memory
			-- during entire lifetime of app
	-- disadv
		-- major reasons for memory leak

gc -- 
1. will gc clear the static field memory -- no
	static var gets freed only when the class unloads(application ends)
	gc always work only with heap
2. 


public class Employee {

    private int employeeId;
    private String employeeName;
    private double salary;

    // Constructor
    public Employee(int employeeId, String employeeName, double salary) {
        this.employeeId = employeeId;
        this.employeeName = employeeName;
        this.salary = salary;
    }

    // Getters
    public int getEmployeeId() {
        return employeeId;
    }

    public String getEmployeeName() {
        return employeeName;
    }

    public double getSalary() {
        return salary;
    }

    // Setters
    public void setEmployeeId(int employeeId) {
        this.employeeId = employeeId;
    }

    public void setEmployeeName(String employeeName) {
        this.employeeName = employeeName;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    // Optional: toString method for easy display
    @Override
    public String toString() {
        return "Employee {" +
               "employeeId=" + employeeId +
               ", employeeName='" + employeeName + '\'' +
               ", salary=" + salary +
               '}';
    }
}

Employee empObj=new Employee;
Employee[] empArr=new Employee[5];
empArr[0]=new Employee(1001,"sara",67.78);

Heap: empArr, empArr[0]
stack:reference of empArr




Method area :
	-- shared memory among all threads
	-- class level information 
		-- fields, methods(name, parameters, modifiers, bytecode), constructors, constants
	-- metadata , bytecode

java 8 -- 
metaspace
	-- part of native 


heap 
	-- shared 
	-- object references, arrays
	-- can be fixed or dynamic
	-- configure heap size
	-- Employee emp=new Employee();
		-- object -- 
	-- exists only one heap per running JVM process
stack 
	-- primitive types
	-- reference to object 
	-- zero or more stacks per running JVM process
	-- stacks and methods
	-- for each method, there is going to stack
	-- method call ; return address -- stack
	-- each thread has its own stack
	-- fixed or dynamic
	-- need not be continuous

Native method stacks
	-- c stacks
	-- Not written in java
	-- methods written using in JNI
	

PC -- program counter registers
	-- address of the code 





###  Heap Size Configuration
- `-Xms<size>`: Sets the **initial heap size** (e.g., `-Xms512m`).
- `-Xmx<size>`: Sets the **maximum heap size** (e.g., `-Xmx2048m`).
- `-XX:InitialHeapSize=<size>`: Alternative to `-Xms`, explicitly sets initial heap.
- `-XX:MaxHeapSize=<size>`: Alternative to `-Xmx`, sets maximum heap.

###  Heap Growth and Limits
- `-XX:MinHeapFreeRatio=<percent>`: Minimum percentage of free heap after GC before JVM shrinks heap.
- `-XX:MaxHeapFreeRatio=<percent>`: Maximum percentage of free heap after GC before JVM grows heap.
- `-XX:MaxRAMPercentage=<percent>`: Limits heap size as a percentage of total system RAM.
- `-XX:MaxRAMFraction=<int>`: Alternative to percentage-based limit (e.g., `2` means half of total RAM).

###  Garbage Collection Tuning
- `-XX:+UseG1GC`: Enables **G1 Garbage Collector** (default in many modern JVMs).
- `-XX:+UseZGC`: Enables **Z Garbage Collector** (low-latency, scalable).
- `-XX:+UseShenandoahGC`: Enables **Shenandoah GC** (concurrent compaction).
- `-XX:+UseParallelGC`: Enables **Parallel GC** (throughput-focused).
- `-XX:+UseConcMarkSweepGC`: Enables **CMS GC** (deprecated in newer versions).

###  Diagnostic and Debugging
- `-XX:+PrintGCDetails`: Prints detailed GC logs.
- `-XX:+PrintHeapAtGC`: Shows heap layout before and after GC.
- `-XX:+HeapDumpOnOutOfMemoryError`: Dumps heap when OOM occurs.
- `-XX:HeapDumpPath=<file>`: Specifies path for heap dump file.

